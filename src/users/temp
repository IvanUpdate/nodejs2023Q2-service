// Controller

// import {
//   Body,
//   Controller,
//   Delete,
//   Get,
//   HttpCode,
//   Param,
//   ParseUUIDPipe,
//   Post,
//   Put,
//   UseFilters,
//   UsePipes,
//   ValidationPipe,
// } from '@nestjs/common';
// import { UsersService } from './users.service';
// import { CreateUserDto } from './dto/create.dto';
// import { UpdateUserDto } from './dto/update.dto';
// import { LoggingService } from '../common/logging/logging.service'; // Import LoggingService
// import { CustomExceptionFilter } from '../common/exceptions/custom-exception.filter'; // Import your CustomExceptionFilter

// @Controller('user')
// @UseFilters(CustomExceptionFilter) // Apply the custom exception filter
// export class UsersController {
//   constructor(
//     private usersService: UsersService,
//     private readonly loggingService: LoggingService, // Inject LoggingService
//   ) {}

//   @Get()
//   async getAll() {
//     this.loggingService.logRequestInfo('GET /user'); // Log the incoming request
//     const users = await this.usersService.getAll();
//     this.loggingService.logResponseInfo('GET /user', users); // Log the response
//     return users;
//   }

//   @Get('/:id')
//   async getOne(@Param('id', ParseUUIDPipe) id: string) {
//     this.loggingService.logRequestInfo(`GET /user/${id}`); // Log the incoming request
//     const user = await this.usersService.getOne(id);
//     this.loggingService.logResponseInfo(`GET /user/${id}`, user); // Log the response
//     return user;
//   }

//   @UsePipes(new ValidationPipe())
//   @Post()
//   async create(@Body() dto: CreateUserDto) {
//     this.loggingService.logRequestInfo('POST /user'); // Log the incoming request
//     const createdUser = await this.usersService.create(dto);
//     this.loggingService.logResponseInfo('POST /user', createdUser); // Log the response
//     return createdUser;
//   }

//   @UsePipes(new ValidationPipe())
//   @Put('/:id')
//   async update(
//     @Param('id', ParseUUIDPipe) id: string,
//     @Body() dto: UpdateUserDto,
//   ) {
//     this.loggingService.logRequestInfo(`PUT /user/${id}`); // Log the incoming request
//     const updatedUser = await this.usersService.update(id, dto);
//     this.loggingService.logResponseInfo(`PUT /user/${id}`, updatedUser); // Log the response
//     return updatedUser;
//   }

//   @Delete('/:id')
//   @HttpCode(204)
//   async delete(@Param('id', ParseUUIDPipe) id: string) {
//     this.loggingService.logRequestInfo(`DELETE /user/${id}`); // Log the incoming request
//     await this.usersService.delete(id);
//     this.loggingService.logResponseInfo(`DELETE /user/${id}`, 'User deleted'); // Log the response
//   }
// }


// Service

// import {
//     HttpException,
//     HttpStatus,
//     Injectable,
//     NotFoundException,
//   } from '@nestjs/common';
//   import { CreateUserDto } from './dto/create.dto';
//   import { UpdateUserDto } from './dto/update.dto';
//   import { formatUser } from './dto/user.dto';
//   import { PrismaService } from 'src/prisma/prisma.service';
//   import * as bcrypt from 'bcrypt';
//   import { LoggingService } from '../common/logging/logging.service'; // Import LoggingService
  
//   const SALT = Number(process.env.CRYPT_SALT) || 10;
  
//   @Injectable()
//   export class UsersService {
//     constructor(
//       private prismaService: PrismaService,
//       private readonly loggingService: LoggingService, // Inject LoggingService
//     ) {}
  
//     async getAll() {
//       this.loggingService.logServiceInfo('Getting all users'); // Log service-level info
//       const users = await this.prismaService.user.findMany();
//       return users.map((user) => formatUser(user));
//     }
  
//     async getOne(id: string) {
//       this.loggingService.logServiceInfo(`Getting user with ID: ${id}`); // Log service-level info
//       const user = await this.prismaService.user.findUnique({
//         where: {
//           id: id,
//         },
//       });
//       if (!user) {
//         throw new NotFoundException('User not found');
//       }
//       return formatUser(user);
//     }
  
//     async create(dto: CreateUserDto) {
//       this.loggingService.logServiceInfo('Creating a new user'); // Log service-level info
//       const hash = await bcrypt.hash(dto.password, SALT);
//       const data = {
//         login: dto.login,
//         password: hash,
//       };
//       const user = await this.prismaService.user.create({ data: data });
//       return formatUser(user);
//     }
  
//     async update(id: string, dto: UpdateUserDto) {
//       this.loggingService.logServiceInfo(`Updating user with ID: ${id}`); // Log service-level info
//       const user = await this.prismaService.user.findUnique({
//         where: {
//           id: id,
//         },
//       });
  
//       if (!user) {
//         throw new HttpException('User not found', HttpStatus.NOT_FOUND);
//       }
  
//       if (user.password !== dto.oldPassword) {
//         throw new HttpException('Wrong old password', HttpStatus.FORBIDDEN);
//       }
  
//       const updateUser = await this.prismaService.user.update({
//         where: { id },
//         data: {
//           password: dto.newPassword,
//           version: { increment: 1 },
//         },
//       });
//       return formatUser(updateUser);
//     }
  
//     async delete(id: string) {
//       this.loggingService.logServiceInfo(`Deleting user with ID: ${id}`); // Log service-level info
//       const user = await this.prismaService.user.findUnique({
//         where: {
//           id: id,
//         },
//       });
  
//       if (!user) {
//         throw new NotFoundException('User not found');
//       }
  
//       await this.prismaService.user.delete({
//         where: {
//           id: id,
//         },
//       });
//     }
  
//     async getOneByLogin(login: string) {
//       this.loggingService.logServiceInfo(`Getting user by login: ${login}`); // Log service-level info
//       const user = await this.prismaService.user.findFirst({
//         where: {
//           login: login,
//         },
//       });
//       if (!user) {
//         throw new NotFoundException('User not found');
//       }
//       return user;
//     }
//   }
  